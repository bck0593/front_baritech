"use client"

import { useState } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { ArrowLeft, Calendar, MapPin, Users, Heart, Star, Tag, Filter } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { ThemedCard, ThemedCardHeader, CardContent, CardTitle } from "@/components/themed-card"
import { ThemedButton } from "@/components/themed-button"
import { useTheme } from "@/contexts/theme-context"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"

export default function EventsPage() {
  const router = useRouter()
  const search = useSearchParams()
  const { currentTheme } = useTheme()

  // Tabs: events only (removed meetups)
  const [selectedEvent, setSelectedEvent] = useState<number | null>(null)
  const [selectedCategory, setSelectedCategory] = useState("all")

  // Trial pack dialog (event detail)
  const [trialOpen, setTrialOpen] = useState(false)
  const [trialRequested, setTrialRequested] = useState(false)

  // Neutral recommendation context example
  const todayCare = { meal: "ÂÆåÈ£ü", exercise: "45ÂàÜ", stool: "ËâØÂ•Ω" }
  const recommendedItems = [
    {
      id: "food",
      name: "Ê∂àÂåñ„Ç±„Ç¢„Éï„Éº„ÉâÔºàÂ∞èÁ≤íÔºâ",
      img: "/images/uni-food.png",
      evidence: [
        "‰∏ªÊàêÂàÜ: ‰Ωé„Ç¢„É¨„É´„Ç≤„É≥È∂èÁî±Êù•„Åü„Çì„Å±„Åè",
        "È£üÁâ©ÁπäÁ∂≠: „Éì„Éº„Éà„Éë„É´„Éó/„Éï„É©„ÇØ„Éà„Ç™„É™„Ç¥Á≥ñÔºà‰æøË≥™„Çµ„Éù„Éº„ÉàÔºâ",
        "ÁõÆÁöÑ: Ê∂àÂåñÊÄß„ÅÆÁ¢∫‰øù„Å®‰æø„ÅÆÂÆâÂÆöÂåñ",
      ],
      note: "ÈÅãÂãïÈáè„Åå„ÇÑ„ÇÑÂ§ö„ÇÅ„ÅÆÊó•„Å´„ÄÅÈÅ©Â∫¶„Å™„Ç®„Éç„É´„ÇÆ„ÉºÂØÜÂ∫¶Ë®≠Ë®à„ÅåÂêà„ÅÜÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ",
    },
    {
      id: "treat",
      name: "„Éà„É¨„Éº„Éã„É≥„Ç∞Áî®„ÇÑ„Çè„Çâ„Åã„Åä„ÇÑ„Å§",
      img: "/images/uni-snack.png",
      evidence: [
        "‰∏ªÊàêÂàÜ: „Åï„Åï„Åø„ÉªÁ±≥Á≤âÔºàÂôõ„Åø„ÇÑ„Åô„ÅïÈáçË¶ñÔºâ",
        "Êüî„Çâ„Åã„Åï: Â∞ëÈáè„ÅÆ‰øùÊπøÊàêÂàÜÔºàÈÅéÂâ∞„ÅØÊéß„Åà„ÇÅÔºâ",
        "ÁõÆÁöÑ: Ë§í„ÇÅ„ÇãÈ†ªÂ∫¶„Å´Âêà„Çè„Åõ„Å¶Â∞ëÈáè„ÅßË™øÊï¥",
      ],
      note: "Áü≠ÊôÇÈñì„ÅÆÂèçÂæ©„Éà„É¨„Éº„Éã„É≥„Ç∞ÊôÇ„Å´Â∞ëÈáè„Åß‰Ωø„Åà„ÇãË®≠Ë®à„ÅåÊúõ„Åæ„Åó„ÅÑ„Åß„Åô„ÄÇ",
    },
    {
      id: "sheet",
      name: "È´òÂê∏Âèé„ÉªÊ∂àËá≠„Ç∑„Éº„Éà",
      img: "/images/uni-sheet.png",
      evidence: [
        "Âê∏ÂèéÊùê: È´òÂàÜÂ≠êÂê∏Ê∞¥„Éù„É™„Éû„ÉºÔºàÁ¥†Êó©„ÅÑÂê∏ÂèéÔºâ",
        "Ê∂àËá≠: „ÇØ„Ç®„É≥ÈÖ∏Á≥ªÊ∂àËá≠ÊàêÂàÜÔºà„Ç¢„É≥„É¢„Éã„Ç¢‰∏≠ÂíåÔºâ",
        "ÁõÆÁöÑ: ÊéíÊ≥ÑÂæå„ÅÆ„Å´„Åä„ÅÑ/Ë∂≥Êø°„ÇåËªΩÊ∏õ",
      ],
      note: "‰æø„ÉªÂ∞ø„ÅåÂÆâÂÆö„Åó„Å¶„ÅÑ„ÇãÊó•„Åß„ÇÇ„ÄÅË°õÁîüÁÆ°ÁêÜ„ÅÆË≤†ÊãÖ„ÇíËªΩ„Åè„Åó„Åæ„Åô„ÄÇ",
    },
  ]

  const events = [
    {
      id: 1,
      title: "„É¶„Éã„Éª„ÉÅ„É£„Éº„É†ÂçîÊ•≠„Ç§„Éô„É≥„Éà",
      subtitle: "ÊÑõÁä¨„ÅÆÂÅ•Â∫∑„Ç±„Ç¢‰ΩìÈ®ì‰ºö",
      date: "8Êúà20Êó•ÔºàÁÅ´Ôºâ",
      time: "14:00-16:00",
      location: "FC‰ªäÊ≤ª ÈáåÂ±±„Éâ„ÉÉ„Ç∞„É©„É≥",
      organizer: "„É¶„Éã„Éª„ÉÅ„É£„Éº„É† √ó FC‰ªäÊ≤ª",
      participants: 12,
      maxParticipants: 20,
      category: "health",
      description:
        "ÊÑõÁä¨„ÅÆÂÅ•Â∫∑ÁÆ°ÁêÜ„Å´„Å§„ÅÑ„Å¶Â≠¶„Å≥„ÄÅÊúÄÊñ∞„ÅÆ„Éö„ÉÉ„ÉàÁî®ÂìÅ„Çí‰ΩìÈ®ì„Åß„Åç„Çã„Ç§„Éô„É≥„Éà„Åß„Åô„ÄÇÁç£ÂåªÂ∏´„Å´„Çà„ÇãÂÅ•Â∫∑Áõ∏Ë´á„ÇÇÂÆüÊñΩ„Åó„Åæ„Åô„ÄÇ",
      features: ["ÁÑ°ÊñôÂÅ•Â∫∑„ÉÅ„Çß„ÉÉ„ÇØ", "„Éö„ÉÉ„ÉàÁî®ÂìÅ„Çµ„É≥„Éó„É´ÈÖçÂ∏É", "Áç£ÂåªÂ∏´Áõ∏Ë´á", "Ë®òÂøµÊíÆÂΩ±"],
      image: "/placeholder.svg?height=200&width=300",
      price: "ÁÑ°Êñô",
      status: "registered",
    },
    {
      id: 2,
      title: "„Ç¢„Ç∏„É™„ÉÜ„Ç£‰ΩìÈ®ì‰ºö",
      subtitle: "ÂàùÂøÉËÄÖÂêë„Åë„Éâ„ÉÉ„Ç∞„Çπ„Éù„Éº„ÉÑ",
      date: "8Êúà25Êó•ÔºàÊó•Ôºâ",
      time: "10:00-12:00",
      location: "FC‰ªäÊ≤ª ÈáåÂ±±„Éâ„ÉÉ„Ç∞„É©„É≥",
      organizer: "FC‰ªäÊ≤ª",
      participants: 8,
      maxParticipants: 15,
      category: "sports",
      description: "ÊÑõÁä¨„Å®‰∏ÄÁ∑í„Å´Ê•Ω„Åó„ÇÅ„Çã„Ç¢„Ç∏„É™„ÉÜ„Ç£„Å´ÊåëÊà¶ÔºÅÂàùÂøÉËÄÖ„Åß„ÇÇÂÆâÂøÉ„Åó„Å¶„ÅîÂèÇÂä†„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÄÇ",
      features: ["Â∞ÇÈñÄ„Ç§„É≥„Çπ„Éà„É©„ÇØ„Çø„ÉºÊåáÂ∞é", "Âô®ÂÖ∑„É¨„É≥„Çø„É´ÁÑ°Êñô", "ÂèÇÂä†Ë®ºÊòéÊõ∏", "ËªΩÈ£ü‰ªò„Åç"],
      image: "/placeholder.svg?height=200&width=300",
      price: "¬•2,000",
      status: "available",
    },
    {
      id: 3,
      title: "„Åó„Åæ„Å™„ÅøÊï£Ê≠©‰ºö",
      subtitle: "ÊÑõÁä¨„Å®Ê•Ω„Åó„ÇÄËá™ÁÑ∂Êï£Á≠ñ",
      date: "8Êúà28Êó•ÔºàÊ∞¥Ôºâ",
      time: "9:00-11:00",
      location: "„Åó„Åæ„Å™„ÅøÊµ∑ÈÅìÂë®Ëæ∫",
      organizer: "‰ªäÊ≤ªÂ∏ÇË¶≥ÂÖâÂçî‰ºö",
      participants: 15,
      maxParticipants: 25,
      category: "outdoor",
      description: "Áæé„Åó„ÅÑ„Åó„Åæ„Å™„Åø„ÅÆÊôØËâ≤„ÇíÊÑõÁä¨„Å®‰∏ÄÁ∑í„Å´Ê•Ω„Åó„Åø„Å™„Åå„Çâ„ÄÅÂÅ•Â∫∑ÁöÑ„Å™Êï£Ê≠©„ÇíÊ•Ω„Åó„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ",
      features: ["„Ç¨„Ç§„Éâ‰ªò„Åç", "ÂÜôÁúüÊíÆÂΩ±„Çµ„Éº„Éì„Çπ", "Âú∞ÂÖÉÁâπÁî£ÂìÅ„ÅäÂúüÁî£", "„Éâ„É™„É≥„ÇØ‰ªò„Åç"],
      image: "/placeholder.svg?height=200&width=300",
      price: "¬•1,500",
      status: "available",
    },
    {
      id: 4,
      title: "„Éö„ÉÉ„ÉàÈò≤ÁÅΩ„Çª„Éü„Éä„Éº",
      subtitle: "„ÇÇ„Åó„ÇÇ„ÅÆÊôÇ„Å´ÂÇô„Åà„Å¶",
      date: "9Êúà3Êó•ÔºàÁÅ´Ôºâ",
      time: "19:00-20:30",
      location: "‰ªäÊ≤ªÂ∏ÇÊ∞ëÈ§®",
      organizer: "‰ªäÊ≤ªÂ∏ÇÂΩπÊâÄ",
      participants: 5,
      maxParticipants: 30,
      category: "education",
      description: "ÁÅΩÂÆ≥ÊôÇ„Å´„Éö„ÉÉ„Éà„ÇíÂÆà„Çã„Åü„ÇÅ„ÅÆÁü•Ë≠ò„Å®Ê∫ñÂÇô„Å´„Å§„ÅÑ„Å¶Â≠¶„Å≥„Åæ„Åô„ÄÇÈò≤ÁÅΩ„Ç∞„ÉÉ„Ç∫„ÅÆÁ¥π‰ªã„ÇÇË°å„ÅÑ„Åæ„Åô„ÄÇ",
      features: ["Èò≤ÁÅΩ„Ç∞„ÉÉ„Ç∫ÈÖçÂ∏É", "Â∞ÇÈñÄÂÆ∂Ë¨õÊºî", "Ë≥™ÁñëÂøúÁ≠î", "Ë≥áÊñôÈÖçÂ∏É"],
      image: "/placeholder.svg?height=200&width=300",
      price: "ÁÑ°Êñô",
      status: "available",
    },
  ]

  const categories = [
    { id: "all", name: "„Åô„Åπ„Å¶", icon: "üè∑Ô∏è" },
    { id: "health", name: "ÂÅ•Â∫∑", icon: "üè•" },
    { id: "sports", name: "„Çπ„Éù„Éº„ÉÑ", icon: "üèÉ" },
    { id: "outdoor", name: "„Ç¢„Ç¶„Éà„Éâ„Ç¢", icon: "üå≤" },
    { id: "education", name: "Â≠¶Áøí", icon: "üìö" },
  ]

  const filteredEvents = selectedCategory === "all" ? events : events.filter((e) => e.category === selectedCategory)

  const handleEventRegistration = (eventId: number) => {
    const ev = events.find((e) => e.id === eventId)
    if (!ev) return
    if (ev.status === "registered") {
      alert("„Ç§„Éô„É≥„Éà„ÅÆÂèÇÂä†„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü")
      ev.status = "available"
    } else {
      alert("„Ç§„Éô„É≥„Éà„Å´ÂèÇÂä†Áî≥„ÅóËæº„Åø„Åó„Åæ„Åó„ÅüÔºÅ")
      ev.status = "registered"
    }
    setSelectedEvent(null)
  }

  const handleAddToFavorites = (eventId: number) => {
    alert("„ÅäÊ∞ó„Å´ÂÖ•„Çä„Å´ËøΩÂä†„Åó„Åæ„Åó„ÅüÔºÅ")
  }

  // Event detail view stays within the Events tab UX
  if (selectedEvent) {
    const event = events.find((e) => e.id === selectedEvent)!
    return (
      <div className="max-w-md mx-auto">
        <div
          className="min-h-screen"
          style={{
            background: `linear-gradient(to bottom, ${currentTheme.primary[50]}, white, ${currentTheme.primary[100]})`,
        }}
      >
        <header className="bg-white shadow-sm border-b" style={{ borderColor: currentTheme.primary[100] }}>
          <div className="max-w-md mx-auto px-4 py-4">
            <div className="flex items-center space-x-3">
              <button onClick={() => setSelectedEvent(null)}>
                <ArrowLeft className="w-5 h-5 text-gray-600" />
              </button>
              <h1 className="text-lg font-semibold text-gray-800">„Ç§„Éô„É≥„ÉàË©≥Á¥∞</h1>
            </div>
          </div>
        </header>

        <div className="max-w-md mx-auto px-4 py-6 space-y-6">
          <div
            className="w-full h-48 rounded-lg overflow-hidden"
            style={{
              background: `linear-gradient(to right, ${currentTheme.primary[200]}, ${currentTheme.accent[200]})`,
            }}
          >
            <img src={event.image || "/placeholder.svg"} alt={event.title} className="w-full h-full object-cover" />
          </div>

          <div>
            <div className="flex items-center justify-between mb-2">
              <Badge
                style={{ backgroundColor: currentTheme.accent[100], color: currentTheme.accent[700] }}
                className="text-xs"
              >
                {categories.find((c) => c.id === event.category)?.name}
              </Badge>
              {event.status === "registered" && (
                <Badge style={{ backgroundColor: currentTheme.primary[600], color: "white" }}>ÂèÇÂä†‰∫àÂÆö</Badge>
              )}
            </div>
            <h2 className="text-xl font-bold text-gray-800 mb-1">{event.title}</h2>
            <p className="text-sm text-gray-600">{event.subtitle}</p>
          </div>

          <ThemedCard>
            <CardContent className="pt-4 space-y-4">
              <div className="flex items-center space-x-3">
                <Calendar className="w-5 h-5" style={{ color: currentTheme.primary[600] }} />
                <div>
                  <div className="font-medium">{event.date}</div>
                  <div className="text-sm text-gray-600">{event.time}</div>
                </div>
              </div>

              <div className="flex items-center space-x-3">
                <MapPin className="w-5 h-5 text-red-500" />
                <div className="font-medium">{event.location}</div>
              </div>

              <div className="flex items-center space-x-3">
                <Users className="w-5 h-5 text-blue-500" />
                <div>
                  <span className="font-medium">
                    {event.participants}/{event.maxParticipants}Âêç
                  </span>
                  <span className="text-sm text-gray-600 ml-2">ÂèÇÂä†‰∫àÂÆö</span>
                </div>
              </div>

              <div className="flex items-center space-x-3">
                <Tag className="w-5 h-5" style={{ color: currentTheme.accent[500] }} />
                <div className="font-medium">{event.price}</div>
              </div>
            </CardContent>
          </ThemedCard>

          <ThemedCard>
            <ThemedCardHeader>
              <CardTitle className="text-base">„Ç§„Éô„É≥„ÉàÂÜÖÂÆπ</CardTitle>
            </ThemedCardHeader>
            <CardContent>
              <p className="text-gray-700 mb-4">{event.description}</p>

              <div className="space-y-3">
                <div>
                  <h4 className="font-medium text-gray-800 mb-2">ÁâπÂÖ∏„Éª„Çµ„Éº„Éì„Çπ</h4>
                  <div className="grid grid-cols-2 gap-2">
                    {event.features.map((feature, index) => (
                      <div key={index} className="flex items-center space-x-2 text-sm text-gray-600">
                        <div
                          className="w-2 h-2 rounded-full"
                          style={{ backgroundColor: currentTheme.accent[500] }}
                        ></div>
                        <span>{feature}</span>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h4 className="font-medium text-gray-800 mb-1">‰∏ªÂÇ¨</h4>
                  <p className="text-sm text-gray-600">{event.organizer}</p>
                </div>
              </div>
            </CardContent>
          </ThemedCard>

          {event.id === 1 && (
            <ThemedCard>
              <ThemedCardHeader>
                <CardTitle className="text-base">‰ªäÊó•„ÅÆ„Ç±„Ç¢„Å´Âêà„ÅÜË£úÂä©„Ç¢„Ç§„ÉÜ„É†Ôºà„É¶„Éã„Éª„ÉÅ„É£„Éº„É†ÈÄ£Êê∫Ôºâ</CardTitle>
              </ThemedCardHeader>
              <CardContent>
                <p className="text-xs text-gray-600 mb-3">
                  ‰∏≠Á´ã„ÉªË™†ÂÆü„Å™ÊèêÊ°à„Åß„Åô„ÄÇË≥ºÂÖ•ÂâçÊèê„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„ÇìÔºà‰ªªÊÑèÔºâ„ÄÇÁä∂ÊÖã: È£ü‰∫ã {todayCare.meal} / ÈÅãÂãï{" "}
                  {todayCare.exercise} / ÊéíÊ≥Ñ {todayCare.stool}
                </p>
                <div className="space-y-3">
                  {recommendedItems.map((it) => (
                    <div key={it.id} className="flex items-start gap-3 rounded-lg bg-gray-50 p-3">
                      <div className="h-14 w-14 overflow-hidden rounded-md bg-white">
                        <img src={it.img || "/placeholder.svg"} alt={it.name} className="h-full w-full object-cover" />
                      </div>
                      <div className="min-w-0 flex-1">
                        <div className="mb-1 flex items-center justify-between">
                          <div className="text-sm font-medium text-gray-800">{it.name}</div>
                          <span
                            aria-hidden
                            className="h-2 w-2 rounded-full"
                            style={{ backgroundColor: "var(--brand-yellow)" }}
                          />
                        </div>
                        <ul className="list-disc pl-4">
                          {it.evidence.map((ev, idx) => (
                            <li key={idx} className="text-xs text-gray-600">
                              {ev}
                            </li>
                          ))}
                        </ul>
                        <p className="mt-1 text-xs" style={{ color: "var(--ink-3)" }}>
                          {it.note}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-3">
                  <ThemedButton
                    variant="primary"
                    className="w-full"
                    onClick={() => setTrialOpen(true)}
                  >
                    „Éà„É©„Ç§„Ç¢„É´„Éë„ÉÉ„ÇØ„ÇíÁî≥ËæºÔºà„Ç§„Éô„É≥„Éà‰ºöÂ†¥„ÅßÂèóÂèñÔºâ
                  </ThemedButton>
                  {trialRequested && (
                    <p className="mt-2 text-xs" style={{ color: "var(--brand-navy)" }}>
                      Áî≥ËæºÊ∏à„ÅøÔºö{event.title}Ôºà{event.date} {event.time}Ôºâ„ÅßÂèóÂèñ‰∫àÂÆö
                    </p>
                  )}
                  <p className="mt-2 text-[11px] text-gray-500">
                    „ÅîÊèêÊ°à„ÅØ‰∏ÄËà¨ÁöÑ„Å™ÊàêÂàÜÊÉÖÂ†±„Å´Âü∫„Å•„ÅèÂèÇËÄÉ„Åß„Åô„ÄÇÂÄã‰ΩìÂ∑Æ„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅ„Åã„Åã„Çä„Å§„ÅëÁ≠â„Åß„ÅÆÁõ∏Ë´á„ÇÇ„ÅîÊ§úË®é„Åè„Å†„Åï„ÅÑ„ÄÇ
                  </p>
                </div>
              </CardContent>
            </ThemedCard>
          )}

          <ThemedCard>
            <ThemedCardHeader>
              <CardTitle className="text-base">ÂèÇÂä†‰∫àÂÆö„ÅÆÈ£º„ÅÑ‰∏ª„Åï„Çì</CardTitle>
            </ThemedCardHeader>
            <CardContent>
              <div className="flex space-x-2 mb-3">
                {[1, 2, 3, 4, 5].map((i) => (
                  <Avatar key={i} className="w-8 h-8">
                    <AvatarFallback
                      style={{ backgroundColor: currentTheme.primary[100], color: currentTheme.primary[700] }}
                      className="text-xs"
                    >
                      {String.fromCharCode(65 + i)}
                    </AvatarFallback>
                  </Avatar>
                ))}
                <div className="w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center">
                  <span className="text-xs text-gray-600">+{Math.max(event.participants - 5, 0)}</span>
                </div>
              </div>
              <p className="text-xs text-gray-600">Âêå„ÅòÂú∞Âüü„ÅÆÊÑõÁä¨ÂÆ∂„ÅÆÁöÜ„Åï„Çì„ÅåÂèÇÂä†‰∫àÂÆö„Åß„Åô</p>
            </CardContent>
          </ThemedCard>

          <div className="space-y-3 pb-20">
            {event.status === "registered" ? (
              <ThemedButton variant="outline" className="w-full py-3" onClick={() => handleEventRegistration(event.id)}>
                ÂèÇÂä†‰∫àÂÆöÔºà„Ç≠„É£„É≥„Çª„É´ÂèØËÉΩÔºâ
              </ThemedButton>
            ) : (
              <ThemedButton variant="primary" className="w-full py-3" onClick={() => handleEventRegistration(event.id)}>
                ÂèÇÂä†Áî≥„ÅóËæº„Åø
              </ThemedButton>
            )}
          </div>
        </div>

        <Dialog open={trialOpen} onOpenChange={setTrialOpen}>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle className="text-brand-navy">„Éà„É©„Ç§„Ç¢„É´„Éë„ÉÉ„ÇØÁî≥ËæºÔºàÂèóÂèñÂ†¥ÊâÄ„ÅÆÁ¢∫Ë™çÔºâ</DialogTitle>
              <DialogDescription className="text-xs text-gray-500">
                ÂèóÂèñ„ÅØ„Ç§„Éô„É≥„Éà‰ºöÂ†¥„ÅßË°å„ÅÑ„Åæ„Åô„ÄÇË≤ªÁî®„ÅØ„Åã„Åã„Çä„Åæ„Åõ„ÇìÔºàÊï∞ÈáèÈôêÂÆöÔºâ„ÄÇ
              </DialogDescription>
            </DialogHeader>
            <div className="space-y-3">
              <div className="rounded-lg bg-gray-50 p-3">
                <div className="text-sm font-medium text-gray-800">ÂèóÂèñ„Ç§„Éô„É≥„Éà</div>
                <div className="text-xs text-gray-600">{event.title}</div>
                <div className="text-xs text-gray-600">
                  {event.date} ‚Ä¢ {event.time} ‚Ä¢ {event.location}
                </div>
              </div>
              <button
                className="w-full rounded-md px-4 py-2 text-sm font-medium shadow-sm"
                style={{ backgroundColor: "var(--brand-blue)", color: "white" }}
                onClick={() => {
                  setTrialOpen(false)
                  setTrialRequested(true)
                  const el = document.createElement("div")
                  el.textContent = "„Éà„É©„Ç§„Ç¢„É´Áî≥Ëæº„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇÂΩìÊó•‰ºöÂ†¥„Åß„ÅäÂèó„ÅëÂèñ„Çä„Åè„Å†„Åï„ÅÑ„ÄÇ"
                  el.className =
                    "fixed left-1/2 top-4 -translate-x-1/2 rounded-md bg-brand-blue px-4 py-2 text-white shadow-md z-[60]"
                  document.body.appendChild(el)
                  setTimeout(() => el.remove(), 1600)
                }}
              >
                „Åì„ÅÆ„Ç§„Éô„É≥„Éà„ÅßÂèó„ÅëÂèñ„Çã
              </button>
              <p className="text-[11px] text-gray-500">
                Êäº„ÅóÂ£≤„Çä„ÅØ„ÅÑ„Åü„Åó„Åæ„Åõ„Çì„ÄÇÊï∞Èáè„Å´Èôê„Çä„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅ„ÅäÊ∏°„Åó„Åß„Åç„Å™„ÅÑÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ
              </p>
            </div>
          </DialogContent>
        </Dialog>
      </div>
      </div>
    )
  }

  return (
    <div className="max-w-md mx-auto">
      <div
        className="min-h-screen"
      style={{
        background: `linear-gradient(to bottom, ${currentTheme.primary[50]}, white, ${currentTheme.primary[100]})`,
      }}
    >
      {/* Header */}
      <header className="bg-white shadow-sm border-b" style={{ borderColor: currentTheme.primary[100] }}>
        <div className="max-w-md mx-auto px-4 py-4">
          <div className="flex items-center space-x-3">
            <button onClick={() => router.back()}>
              <ArrowLeft className="w-5 h-5 text-gray-600" />
            </button>
            <div>
              <h1 className="text-lg font-semibold text-gray-800">„Ç§„Éô„É≥„Éà</h1>
              <p className="text-sm text-gray-600">ImabariOne</p>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-md mx-auto px-4 py-6 space-y-6">
        {/* Category Filter */}
        <ThemedCard variant="accent">
          <CardContent className="pt-4">
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-medium text-gray-800">„Ç´„ÉÜ„Ç¥„É™„Éº</h3>
              <Filter className="w-4 h-4" style={{ color: currentTheme.accent[600] }} />
            </div>
            <div className="flex space-x-2 overflow-x-auto pb-2">
              {categories.map((category) => (
                <ThemedButton
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  variant={selectedCategory === category.id ? "primary" : "outline"}
                  size="sm"
                  className="flex-shrink-0"
                >
                  <span className="mr-1">{category.icon}</span>
                  {category.name}
                </ThemedButton>
              ))}
            </div>
          </CardContent>
        </ThemedCard>

        {/* Featured Event */}
        <ThemedCard variant="primary">
          <ThemedCardHeader variant="primary">
            <CardTitle className="text-base flex items-center">
              <Star className="w-4 h-4 mr-2" />
              Ê≥®ÁõÆ„ÅÆ„Ç§„Éô„É≥„Éà
            </CardTitle>
          </ThemedCardHeader>
          <CardContent>
            <div className="cursor-pointer" onClick={() => setSelectedEvent(1)}>
              <div className="flex items-start space-x-3">
                <div className="w-16 h-16 bg-white rounded-lg flex items-center justify-center shadow-sm">
                  <span className="text-2xl">üè•</span>
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-800 mb-1">„É¶„Éã„Éª„ÉÅ„É£„Éº„É†ÂçîÊ•≠„Ç§„Éô„É≥„Éà</h3>
                  <p className="text-sm text-gray-600 mb-2">ÊÑõÁä¨„ÅÆÂÅ•Â∫∑„Ç±„Ç¢‰ΩìÈ®ì‰ºö</p>
                  <div className="flex items-center space-x-2 text-xs text-gray-500">
                    <Calendar className="w-3 h-3" />
                    <span>8/20ÔºàÁÅ´Ôºâ14:00-16:00</span>
                  </div>
                  <Badge
                    style={{ backgroundColor: currentTheme.primary[600], color: "white" }}
                    className="text-xs mt-2"
                  >
                    ÂèÇÂä†‰∫àÂÆö
                  </Badge>
                </div>
              </div>
            </div>
          </CardContent>
        </ThemedCard>

        {/* Events List */}
        <div className="space-y-4 pb-20">
          {filteredEvents.map((event) => (
            <ThemedCard
              key={event.id}
              className="cursor-pointer hover:shadow-md transition-shadow"
              onClick={() => setSelectedEvent(event.id)}
            >
              <CardContent className="pt-4">
                <div className="flex items-start space-x-3">
                  <div className="w-20 h-16 bg-gray-100 rounded-lg overflow-hidden">
                    <img
                      src={event.image || "/placeholder.svg"}
                      alt={event.title}
                      className="w-full h-full object-cover"
                    />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-start justify-between mb-2">
                      <div>
                        <h3 className="font-semibold text-gray-800 text-sm mb-1">{event.title}</h3>
                        <p className="text-xs text-gray-600">{event.subtitle}</p>
                      </div>
                      <div className="text-right">
                        <div className="text-sm font-medium text-gray-800">{event.date}</div>
                        <div className="text-sm text-gray-600">{event.time}</div>
                      </div>
                    </div>

                    <div className="space-y-1">
                      <div className="flex items-center text-xs text-gray-600">
                        <MapPin className="w-3 h-3 mr-1" />
                        {event.location}
                      </div>

                      <div className="flex items-center justify-between">
                        <div className="flex items-center text-xs text-gray-600">
                          <Users className="w-3 h-3 mr-1" />
                          {event.participants}/{event.maxParticipants}ÂêçÂèÇÂä†‰∫àÂÆö
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge variant="outline" className="text-xs">
                            {event.price}
                          </Badge>
                          {event.status === "registered" && (
                            <Badge
                              style={{ backgroundColor: currentTheme.primary[600], color: "white" }}
                              className="text-xs"
                            >
                              ÂèÇÂä†‰∫àÂÆö
                            </Badge>
                          )}
                          {event.id === 1 && (
                            <Badge
                              className="text-xs"
                              style={{ backgroundColor: "var(--brand-yellow)", color: "var(--ink-1)" }}
                            >
                              „Éà„É©„Ç§„Ç¢„É´ÂèóÂèñÂèØ
                            </Badge>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </ThemedCard>
          ))}
        </div>
      </main>
    </div>
    </div>
  )
}
