name: Build and deploy Node.js app to Azure Web App - app-002-gen10-step3-2-node-oshima13

on:
  push:
    branches: [main]
  workflow_dispatch:

# 409 Conflict回避: 並行実行を禁止
concurrency:
  group: azure-deploy
  cancel-in-progress: false

env:
  NODE_ENV: production
  NPM_CONFIG_LOGLEVEL: info

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Verify npm configuration
      run: |
        echo "npm version: $(npm --version)"
        echo "node version: $(node --version)"
        cat .npmrc || echo "No .npmrc file found"

    - name: Clear npm cache
      run: npm cache clean --force

    - name: Install dependencies
      run: |
        npm install --no-audit --no-fund
        npm list --depth=0

    - name: Verify project structure
      run: |
        echo "=== Project Structure ==="
        ls -la
        echo "=== Components directory ==="
        ls -la components/ || echo "No components directory"
        ls -la components/ui/ || echo "No components/ui directory"
        echo "=== tsconfig.json ==="
        cat tsconfig.json

    - name: Create symbolic link for components
      run: |
        echo "Creating absolute path resolution..."
        ln -sf "$PWD/components" node_modules/@components 2>/dev/null || true

    - name: Build application
      run: |
        echo "Building Next.js application..."
        echo "Current directory: $PWD"
        echo "NODE_PATH: $NODE_PATH"
        export NODE_PATH="$PWD:$NODE_PATH"
        npm run build
        echo "=== Build completed ==="
        ls -la .next/ || echo "No .next directory found"
        echo "=== Standalone build check ==="
        ls -la .next/standalone/ || echo "No standalone directory found"
        echo "=== Static files check ==="
        ls -la .next/standalone/public/ || echo "No public directory in standalone"

    - name: Prepare deployment package
      run: |
        echo "Preparing deployment package..."
        # Create deployment directory
        mkdir -p deploy-package
        
        # Copy standalone build (this includes the complete app)
        cp -r .next/standalone/* deploy-package/
        
        # Copy static assets to the correct location
        mkdir -p deploy-package/.next/static
        cp -r .next/static/* deploy-package/.next/static/ 2>/dev/null || echo "No static files to copy"
        
        # Copy public assets to the correct location  
        mkdir -p deploy-package/public
        cp -r public/* deploy-package/public/ 2>/dev/null || echo "No public files to copy"
        
        # Copy server files
        cp server.js deploy-package/ 2>/dev/null || echo "No server.js to copy"
        cp copy-static.js deploy-package/ 2>/dev/null || echo "No copy-static.js to copy"
        
        # Create a minimal package.json for Azure without build scripts
        cat > deploy-package/package.json << 'EOF'
        {
          "name": "dogmates-app",
          "version": "1.0.0",
          "description": "Pre-built Next.js app",
          "private": true,
          "scripts": {
            "start": "node server.js"
          },
          "engines": {
            "node": ">=20.0.0"
          }
        }
        EOF
        
        # Create web.config for Azure
        cat > deploy-package/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <system.webServer>
            <handlers>
              <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
            </handlers>
            <rewrite>
              <rules>
                <rule name="DynamicContent">
                  <conditions>
                    <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                  </conditions>
                  <action type="Rewrite" url="server.js"/>
                </rule>
              </rules>
            </rewrite>
            <security>
              <requestFiltering>
                <hiddenSegments>
                  <remove segment="bin"/>
                </hiddenSegments>
              </requestFiltering>
            </security>
            <httpErrors existingResponse="PassThrough" />
            <iisnode node_env="%node_env%" 
                     nodeProcessCountPerApplication="1"
                     maxConcurrentRequestsPerProcess="1024"
                     maxNamedPipeConnectionRetry="100"
                     namedPipeConnectionRetryDelay="250"
                     maxNamedPipeConnectionPoolSize="512"
                     maxNamedPipePooledConnectionAge="30000"
                     asyncCompletionThreadCount="0"
                     initialRequestBufferSize="4096"
                     maxRequestBufferSize="65536"
                     watchedFiles="web.config"
                     uncFileChangesPollingInterval="5000"
                     gracefulShutdownTimeout="60000"
                     loggingEnabled="true"
                     logDirectory="iisnode"
                     debuggingEnabled="false"
                     debugHeaderEnabled="false"
                     debuggerPortRange="5058-6058"
                     debuggerPathSegment="debug"
                     maxLogFileSizeInKB="128"
                     maxTotalLogFileSizeInKB="1024"
                     maxLogFiles="20"
                     devErrorsEnabled="false"
                     flushResponse="false"
                     enableXFF="false"
                     promoteServerVars=""
                     configOverrides="iisnode.yml" />
          </system.webServer>
        </configuration>
        EOF

        echo "=== Deployment package contents ==="
        ls -la deploy-package/
        echo "=== Package.json content ==="
        cat deploy-package/package.json
        
        # Create zip for deployment
        cd deploy-package
        zip -r ../deployment.zip .
        cd ..
        echo "=== Deployment zip created ==="
        ls -la deployment.zip

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: app-002-gen10-step3-2-node-oshima13
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_APP_002_GEN10_STEP3_2_NODE_OSHIMA13 }}
        package: deployment.zip
